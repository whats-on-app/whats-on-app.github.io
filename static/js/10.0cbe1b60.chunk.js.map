{"version":3,"sources":["components/AboutPage/index.js","components/Text/index.js","utils/breakpoints.js","utils/pixels.js","utils/above.js"],"names":["Wrapper","styled","div","_templateObject","_taggedTemplateLiteral","Anchor","Link","_templateObject2","p","theme","colors","green","AboutPage","useEffect","document","title","React","createElement","Container","Text","weight","xs","sm","md","xg","Row","vertical-gutter","Cell","lg","style","margin","to","ariaLabel","color","mapPropsBreakpoints","breakpoints","fn","props","Object","keys","filter","prop","includes","map","label","above","x","typography","defaultProps","parse","value","arguments","length","undefined","type","test","parseFloat","stringify","concat","utility","reduce","acc","css","width","_len","args","Array","_key","_ref"],"mappings":"uKAOA,MAAMA,EAAUC,IAAOC,IAAGC,MAAAC,YAAA,2FAOpBC,EAASJ,YAAOK,IAAPL,CAAYM,MAAAH,YAAA,0JAMbI,GAAMA,EAAEC,MAAMC,OAAOC,OAuDpBC,UA9CGA,MAChBC,oBAAU,KACRC,SAASC,MAAQ,UAIjBC,IAAAC,cAACjB,EAAO,KACNgB,IAAAC,cAACC,IAAS,KACRF,IAAAC,cAACE,IAAI,CAACC,OAAQ,IAAKC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAAGC,GAAI,GAAG,SAG/CR,IAAAC,cAACQ,IAAG,CAACC,mBAAA,GACHV,IAAAC,cAACU,IAAI,CAACN,GAAI,GAAIE,GAAI,EAAGK,GAAI,GACvBZ,IAAAC,cAACE,IAAI,CAACE,GAAI,EAAGC,GAAI,EAAGO,MAAO,CAAEC,OAAQ,UAAW,8HAC8E,IAC5Hd,IAAAC,cAACZ,EAAM,CAAC0B,GAAG,6BAA6BC,UAAU,6BAA4B,6BAErE,KAGXhB,IAAAC,cAACE,IAAI,CAACU,MAAO,CAAEC,OAAQ,UAAW,yGACuE,IACvGd,IAAAC,cAACZ,EAAM,CAAC0B,GAAG,sCAAsCC,UAAU,+BAA8B,cAE/E,IAAI,oDACoC,IAClDhB,IAAAC,cAACZ,EAAM,CAAC0B,GAAG,wBAAwBC,UAAU,qBAAoB,cAExD,KAGXhB,IAAAC,cAACE,IAAI,CAACU,MAAO,CAAEC,OAAQ,UAAW,qUACgS,IAChUd,IAAAC,cAACZ,EAAM,CAAC0B,GAAG,gCAAgCC,UAAU,iCAAgC,UAE3E,IAAI,qBAGhBhB,IAAAC,cAACE,IAAI,CAACU,MAAO,CAAEC,OAAQ,UAAW,+HChE9C,MAAMX,EAAOlB,IAAOC,IAAGC,MAAAC,YAAA,oDACXI,GAAMA,EAAEyB,OAAS,eACXzB,GAAMA,EAAEY,OACrBZ,GCG8B0B,EAACC,EAAaC,IAAQC,GACvDC,OAAOC,KAAKF,GACTG,OAAQC,GAASH,OAAOC,KAAKJ,GAAaO,SAASD,IACnDE,IAAKC,GAAUC,YAAMV,GAAaS,GAAMzC,MAAAC,YAAA,UAAGgC,EAAGC,EAAMO,GAAQP,KDNtDH,CAAoB1B,EAAEC,MAAM0B,YAAcW,GAAMtC,EAAEC,MAAMsC,WAAWD,KAG9E3B,EAAK6B,aAAe,CAAE3B,GAAI,GAEXF,yDELR,MAAM8B,EAAQ,WAAe,IAAdC,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAC5B,MAAMG,SAAcJ,EACpB,MAAa,WAATI,EAA0BJ,EACjB,WAATI,EAA0B,EAC1B,SAASC,KAAKL,GAAeM,WAAWN,EAAO,IAC/C,UAAUK,KAAKL,GAAmC,GAApBM,WAAWN,GACtCA,GAGIO,EAAY,eAACP,EAAKC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,EAAC,OAAQF,EAAMC,GAAM,GAAAQ,OAAMT,EAAMC,GAAM,MAAOA,2CCZzE,MAAMS,EAAWxB,GACtBG,OAAOC,KAAKJ,GAAayB,OAAO,CAACC,EAAKjB,KACpCiB,EAAIjB,GAAS,kBAAakB,YAAG3D,MAAAC,YAAA,oEACNqD,EAAUR,EAAMd,EAAYS,GAAOmB,QACpDD,eAAIX,aAGHU,GACN,IAiBUhB,IATZD,KACD,mBAAAoB,EAAAb,UAAAC,OAAIa,EAAI,IAAAC,MAAAF,GAAAG,EAAA,EAAAA,EAAAH,EAAAG,IAAJF,EAAIE,GAAAhB,UAAAgB,GAAA,OACRC,IAAA,IAAC3D,MAAEA,GAAO2D,EAAA,OACRN,YAAGvD,MAAAH,YAAA,oEACoBqD,EAAUR,EAAMxC,EAAM0B,YAAYS,GAAOmB,QAC1DD,eAAOG","file":"static/js/10.0cbe1b60.chunk.js","sourcesContent":["import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { Row, Cell } from \"griding\";\nimport Container from \"components/Container\";\nimport Text from \"components/Text\";\nimport Link from \"components/Link\";\n\nconst Wrapper = styled.div`\n\tflex: 1\n\tdisplay: flex;\n\tflex-direction: column;\n\ttransition: 0.2s all;\n`;\n\nconst Anchor = styled(Link)`\n  border-radius: 0.125rem;\n  color: currentColor;\n  outline: none;\n  &:focus,\n  &:hover {\n    color: ${(p) => p.theme.colors.green};\n    text-decoration: none;\n  }\n`;\n\n/**\n * A functional component that renders the About page of the app.\n * @returns JSX element that displays information about the app.\n */\nconst AboutPage = () => {\n  useEffect(() => {\n    document.title = \"About\";\n  });\n\n  return (\n    <Wrapper>\n      <Container>\n        <Text weight={600} xs={2} sm={3} md={4} xg={5}>\n          About\n        </Text>\n        <Row vertical-gutter>\n          <Cell xs={12} md={7} lg={6}>\n            <Text xs={0} sm={1} style={{ margin: \"1em 0\" }}>\n              The purpose of this app is to help you quickly get the highest-rated movies/TV shows or explore the information provided by{\" \"}\n              <Anchor to=\"https://www.themoviedb.org\" ariaLabel=\"The Movie Database (TMDB)\">\n                The Movie Database (TMDB)\n              </Anchor>\n              .\n            </Text>\n            <Text style={{ margin: \"1em 0\" }}>\n              I have added 2 main new features: filters and cinemas search, but most of the codebase comes from this{\" \"}\n              <Anchor to=\"https://github.com/vitordino/movies\" ariaLabel=\"Vitordino GitHub repository\">\n                repository\n              </Anchor>{\" \"}\n              and all the design credits should be addressed to{\" \"}\n              <Anchor to=\"https://vitordino.com\" ariaLabel=\"Vitordino website\">\n                Vitor Dino\n              </Anchor>\n              .\n            </Text>\n            <Text style={{ margin: \"1em 0\" }}>\n              The raw data comes from AlloCin√©, BetaSeries, IMDb, Letterboxd, Metacritic, RottenTomatoes, SensCritique, Trakt and The Movie Database (TMDB), all extracted with shell and Node.js scripts and pushed to a MongoDB. Then on the client side it's built with React.js and fetched from an Express.js API. Feel free to visit my{\" \"}\n              <Anchor to=\"https://github.com/pierrevano\" ariaLabel=\"My personal GitHub repository\">\n                GitHub\n              </Anchor>{\" \"}\n              for more details.\n            </Text>\n            <Text style={{ margin: \"1em 0\" }}>This app is also ad-free and does not use cookies.</Text>\n          </Cell>\n        </Row>\n      </Container>\n    </Wrapper>\n  );\n};\n\nexport default AboutPage;\n","import styled from \"styled-components\";\nimport { mapPropsBreakpoints } from \"utils/breakpoints\";\n\nconst Text = styled.div`\n  color: ${(p) => p.color || \"currentColor\"};\n  font-weight: ${(p) => p.weight};\n  ${(p) => mapPropsBreakpoints(p.theme.breakpoints, (x) => p.theme.typography[x])}\n`;\n\nText.defaultProps = { xs: 0 };\n\nexport default Text;\n","import { utility as above } from \"./above\";\n\n/**\n * Maps the breakpoints of a given object to a function that takes in the value of the breakpoint\n * and the original object of props.\n * @param {object} breakpoints - an object containing the breakpoints to map\n * @param {function} fn - the function to map the breakpoints to\n * @returns A function that takes in an object of props and returns an array of mapped breakpoints.\n */\nexport const mapPropsBreakpoints = (breakpoints, fn) => (props) =>\n  Object.keys(props)\n    .filter((prop) => Object.keys(breakpoints).includes(prop))\n    .map((label) => above(breakpoints)[label]`${fn(props[label], props)}`);\n","/**\n * Parses a value and returns a number if possible. If the value is not a number or a string,\n * returns 0. If the value is a string, it will attempt to parse it as a pixel or rem value.\n * @param {number|string} [value=0] - The value to parse.\n * @returns {number} - The parsed value as a number.\n */\nexport const parse = (value = 0) => {\n  const type = typeof value;\n  if (type === \"number\") return value;\n  if (type !== \"string\") return 0;\n  if (/^\\d+px/.test(value)) return parseFloat(value, 10);\n  if (/^\\d+rem/.test(value)) return parseFloat(value) * 16;\n  return value;\n};\n\nexport const stringify = (value = 0) => (!!parse(value) ? `${parse(value)}px` : value);\n","import { css } from \"styled-components\";\nimport { stringify, parse } from \"./pixels\";\n\nexport const utility = (breakpoints) =>\n  Object.keys(breakpoints).reduce((acc, label) => {\n    acc[label] = (...args) => css`\n      @media (min-width: ${stringify(parse(breakpoints[label].width))}) {\n        ${css(...args)}\n      }\n    `;\n    return acc;\n  }, {});\n\n/**\n * Returns a function that generates a CSS media query for screens above a certain width.\n * @param {string} label - The label for the breakpoint to target.\n * @returns A function that generates a CSS media query.\n */\nexport const above =\n  (label) =>\n  (...args) =>\n  ({ theme }) =>\n    css`\n      @media (min-width: ${stringify(parse(theme.breakpoints[label].width))}) {\n        ${css(...args)}\n      }\n    `;\n\nexport default above;\n"],"sourceRoot":""}